"use strict";(self.webpackChunksushi_docs=self.webpackChunksushi_docs||[]).push([[5050],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(t),f=i,h=p["".concat(u,".").concat(f)]||p[f]||d[f]||o;return t?r.createElement(h,a(a({ref:n},l),{},{components:t})):r.createElement(h,a({ref:n},l))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=p;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4180:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],s={sidebar_position:9},u="Interfaces",c={unversionedId:"Developers/Sushiswap/Interfaces",id:"Developers/Sushiswap/Interfaces",title:"Interfaces",description:"Listed below are all of the interfaces used in the aforementioned core contracts.",source:"@site/docs/Developers/Sushiswap/Interfaces.md",sourceDirName:"Developers/Sushiswap",slug:"/Developers/Sushiswap/Interfaces",permalink:"/docs/Developers/Sushiswap/Interfaces",editUrl:"https://github.com/sushiswap/sushi-docs/edit/master/docs/Developers/Sushiswap/Interfaces.md",tags:[],version:"current",lastUpdatedBy:"Genghis Goose",lastUpdatedAt:1655325470,formattedLastUpdatedAt:"6/15/2022",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"docsSidebar",previous:{title:"SushiToken",permalink:"/docs/Developers/Sushiswap/SushiToken"},next:{title:"TridentRouter",permalink:"/docs/Developers/Trident/TridentRouter"}},l={},d=[{value:"IERC20",id:"ierc20",level:2},{value:"IMasterChef",id:"imasterchef",level:2},{value:"IMiniChefV2",id:"iminichefv2",level:2},{value:"IRewarder",id:"irewarder",level:2}],p={toc:d};function f(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"interfaces"},"Interfaces"),(0,o.kt)("p",null,"Listed below are all of the interfaces used in the aforementioned core contracts."),(0,o.kt)("h2",{id:"ierc20"},"IERC20"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n")),(0,o.kt)("p",null,"Standard ERC20 interface; source code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sushiswap/sushiswap/blob/master/protocols/sushiswap/contracts/interfaces/IERC20.sol"},"here"),"."),(0,o.kt)("h2",{id:"imasterchef"},"IMasterChef"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface IMasterChef {\n    using BoringERC20 for IERC20;\n    struct UserInfo {\n        uint256 amount;     // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n    }\n\n    struct PoolInfo {\n        IERC20 lpToken;           // Address of LP token contract.\n        uint256 allocPoint;       // How many allocation points assigned to this pool. SUSHI to distribute per block.\n        uint256 lastRewardBlock;  // Last block number that SUSHI distribution occurs.\n        uint256 accSushiPerShare; // Accumulated SUSHI per share, times 1e12. See below.\n    }\n\n    function poolInfo(uint256 pid) external view returns (IMasterChef.PoolInfo memory);\n    function totalAllocPoint() external view returns (uint256);\n    function deposit(uint256 _pid, uint256 _amount) external;\n}\n")),(0,o.kt)("p",null,"MasterChef contract interface; source code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sushiswap/sushiswap/blob/canary/contracts/interfaces/IMasterChef.sol"},"here"),"."),(0,o.kt)("h2",{id:"iminichefv2"},"IMiniChefV2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"interface IMiniChefV2 {\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n    }\n\n    struct PoolInfo {\n        uint128 accSushiPerShare;\n        uint64 lastRewardTime;\n        uint64 allocPoint;\n    }\n\n    function poolLength() external view returns (uint256);\n    function updatePool(uint256 pid) external returns (IMiniChefV2.PoolInfo memory);\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\n    function deposit(uint256 pid, uint256 amount, address to) external;\n    function withdraw(uint256 pid, uint256 amount, address to) external;\n    function harvest(uint256 pid, address to) external;\n    function withdrawAndHarvest(uint256 pid, uint256 amount, address to) external;\n    function emergencyWithdraw(uint256 pid, address to) external;\n}\n")),(0,o.kt)("p",null,"MiniChef contract interface; source code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sushiswap/sushiswap/blob/canary/contracts/interfaces/IMiniChefV2.sol"},"here"),"."),(0,o.kt)("h2",{id:"irewarder"},"IRewarder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},"interface IRewarder {\n    using BoringERC20 for IERC20;\n    function onSushiReward(uint256 pid, address user, address recipient, uint256 sushiAmount, uint256 newLpAmount) external;\n    function pendingTokens(uint256 pid, address user, uint256 sushiAmount) external view returns (IERC20[] memory, uint256[] memory);\n}\n")),(0,o.kt)("p",null,"Rewarder contract interface; source code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sushiswap/sushiswap/blob/canary/contracts/interfaces/IRewarder.sol"},"here"),"."))}f.isMDXComponent=!0}}]);