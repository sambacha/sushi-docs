"use strict";(self.webpackChunksushi_docs=self.webpackChunksushi_docs||[]).push([[5812],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),f=a,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9259:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:4},l="Interfaces",u={unversionedId:"Developers/Trident/Interfaces",id:"Developers/Trident/Interfaces",title:"Interfaces",description:"Below is a list of interfaces used in the aforementioned Trident and Constant Product Pool contracts.",source:"@site/docs/Developers/Trident/Interfaces.md",sourceDirName:"Developers/Trident",slug:"/Developers/Trident/Interfaces",permalink:"/docs/Developers/Trident/Interfaces",editUrl:"https://github.com/sushiswap/sushi-docs/edit/master/docs/Developers/Trident/Interfaces.md",tags:[],version:"current",lastUpdatedBy:"Genghis Goose",lastUpdatedAt:1655325470,formattedLastUpdatedAt:"6/15/2022",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"MasterDeployer",permalink:"/docs/Developers/Trident/MasterDeployer"},next:{title:"ConstantProductPool",permalink:"/docs/Developers/Trident/Pools/Constant Product/ConstantProductPool"}},c={},d=[{value:"IBentoBoxMinimal",id:"ibentoboxminimal",level:2},{value:"IERC20PermitAllowed",id:"ierc20permitallowed",level:2},{value:"IMasterDeployer",id:"imasterdeployer",level:2},{value:"IPool",id:"ipool",level:2},{value:"IPoolFactory",id:"ipoolfactory",level:2},{value:"IConstantProductPool",id:"iconstantproductpool",level:2},{value:"IConstantProductPoolFactory",id:"iconstantproductpoolfactory",level:2},{value:"ITridentCallee",id:"itridentcallee",level:2},{value:"ITridentNFT",id:"itridentnft",level:2},{value:"ITridentRouter",id:"itridentrouter",level:2},{value:"IWETH9",id:"iweth9",level:2},{value:"IWhiteListManager",id:"iwhitelistmanager",level:2}],p={toc:d};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"interfaces"},"Interfaces"),(0,o.kt)("p",null,"Below is a list of interfaces used in the aforementioned Trident and Constant Product Pool contracts."),(0,o.kt)("h2",{id:"ibentoboxminimal"},"IBentoBoxMinimal"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface IBentoBoxMinimal {\n    function balanceOf(address, address) external view returns (uint256);\n\n    function toShare(\n        address token,\n        uint256 amount,\n        bool roundUp\n    ) external view returns (uint256 share);\n\n    function toAmount(\n        address token,\n        uint256 share,\n        bool roundUp\n    ) external view returns (uint256 amount);\n\n    function registerProtocol() external;\n\n    function deposit(\n        address token,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\n\n    function withdraw(\n        address token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n\n    function transfer(\n        address token,\n        address from,\n        address to,\n        uint256 share\n    ) external;\n\n    function totals(address token) external view returns (Rebase memory total);\n\n    function setMasterContractApproval(\n        address user,\n        address masterContract,\n        bool approved,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function harvest(\n        address token,\n        bool balance,\n        uint256 maxChangeAmount\n    ) external;\n}\n")),(0,o.kt)("p",null,"Minimal BentoBox vault interface; source code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sushiswap/trident/blob/master/contracts/interfaces/IBentoBoxMinimal.sol"},"here"),"."),(0,o.kt)("h2",{id:"ierc20permitallowed"},"IERC20PermitAllowed"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface IERC20PermitAllowed {\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n")),(0,o.kt)("p",null,"IERC20 with permit interface; source code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sushiswap/trident/blob/master/contracts/interfaces/IERC20PermitAllowed.sol"},"here"),"."),(0,o.kt)("h2",{id:"imasterdeployer"},"IMasterDeployer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface IMasterDeployer {\n    function barFee() external view returns (uint256);\n\n    function barFeeTo() external view returns (address);\n\n    function bento() external view returns (address);\n\n    function migrator() external view returns (address);\n\n    function pools(address pool) external view returns (bool);\n\n    function deployPool(address factory, bytes calldata deployData) external returns (address);\n}\n")),(0,o.kt)("p",null,"Trident pool deployer interface; source code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sushiswap/trident/blob/master/contracts/interfaces/IMasterDeployer.sol"},"here"),"."),(0,o.kt)("h2",{id:"ipool"},"IPool"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface IPool {\n    function swap(bytes calldata data) external returns (uint256 finalAmountOut);\n\n    function flashSwap(bytes calldata data) external returns (uint256 finalAmountOut);\n\n    function mint(bytes calldata data) external returns (uint256 liquidity);\n\n    function burn(bytes calldata data) external returns (TokenAmount[] memory withdrawnAmounts);\n\n    function burnSingle(bytes calldata data) external returns (uint256 amountOut);\n\n    function poolIdentifier() external pure returns (bytes32);\n\n    function getAssets() external view returns (address[] memory);\n\n    function getAmountOut(bytes calldata data) external view returns (uint256 finalAmountOut);\n\n    function getAmountIn(bytes calldata data) external view returns (uint256 finalAmountIn);\n\n    event Swap(address indexed recipient, address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut);\n\n    struct TokenAmount {\n        address token;\n        uint256 amount;\n    }\n}\n")),(0,o.kt)("p",null,"Trident pool interface; source code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sushiswap/trident/blob/master/contracts/interfaces/IPool.sol"},"here"),"."),(0,o.kt)("h2",{id:"ipoolfactory"},"IPoolFactory"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface IPoolFactory {\n    function deployPool(bytes calldata _deployData) external returns (address pool);\n\n    function configAddress(bytes32 data) external returns (address pool);\n}\n")),(0,o.kt)("p",null,"Trident factory pool deployment interface; source code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sushiswap/trident/blob/master/contracts/interfaces/IPoolFactory.sol"},"here"),"."),(0,o.kt)("h2",{id:"iconstantproductpool"},"IConstantProductPool"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface IConstantProductPool is IPool, IERC20 {\n    function getNativeReserves()\n        external\n        view\n        returns (\n            uint256 _nativeReserve0,\n            uint256 _nativeReserve1,\n            uint32\n        );\n}\n")),(0,o.kt)("p",null,"Trident Constant Product Pool interface; source code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sushiswap/trident/blob/master/contracts/interfaces/IConstantProductPool.sol"},"here"),"."),(0,o.kt)("h2",{id:"iconstantproductpoolfactory"},"IConstantProductPoolFactory"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface IConstantProductPoolFactory {\n    function getDeployData() external view returns (bytes memory, IMasterDeployer);\n}\n")),(0,o.kt)("p",null,"Trident Constant Product Pool factory interface; source code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sushiswap/trident/blob/master/contracts/interfaces/IConstantProductPoolFactory.sol"},"here"),"."),(0,o.kt)("h2",{id:"itridentcallee"},"ITridentCallee"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface ITridentCallee {\n    function tridentSwapCallback(bytes calldata data) external;\n\n    function tridentMintCallback(bytes calldata data) external;\n}\n")),(0,o.kt)("p",null,"Trident pool callback interface; source code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sushiswap/trident/blob/master/contracts/interfaces/ITridentCallee.sol"},"here"),"."),(0,o.kt)("h2",{id:"itridentnft"},"ITridentNFT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface ITridentNFT {\n    function ownerOf(uint256) external view returns (address);\n}\n")),(0,o.kt)("p",null,"Trident NFT interface; source code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sushiswap/trident/blob/master/contracts/interfaces/ITridentNFT.sol"},"here"),"."),(0,o.kt)("h2",{id:"itridentrouter"},"ITridentRouter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface ITridentRouter {\n    struct Path {\n        address pool;\n        bytes data;\n    }\n\n    struct ExactInputSingleParams {\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        address pool;\n        address tokenIn;\n        bytes data;\n    }\n\n    struct ExactInputParams {\n        address tokenIn;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        Path[] path;\n    }\n\n    struct TokenInput {\n        address token;\n        bool native;\n        uint256 amount;\n    }\n\n    struct InitialPath {\n        address tokenIn;\n        address pool;\n        bool native;\n        uint256 amount;\n        bytes data;\n    }\n\n    struct PercentagePath {\n        address tokenIn;\n        address pool;\n        uint64 balancePercentage;\n        bytes data;\n    }\n\n    struct Output {\n        address token;\n        address to;\n        bool unwrapBento;\n        uint256 minAmount;\n    }\n\n    struct ComplexPathParams {\n        InitialPath[] initialPath;\n        PercentagePath[] percentagePath;\n        Output[] output;\n    }\n}\n")),(0,o.kt)("p",null,"Trident pool router interface; source code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sushiswap/trident/blob/master/contracts/interfaces/ITridentRouter.sol"},"here"),"."),(0,o.kt)("h2",{id:"iweth9"},"IWETH9"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface IWETH9 is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint256) external;\n}\n")),(0,o.kt)("p",null,"WETH interface; source code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sushiswap/trident/blob/master/contracts/interfaces/IWETH9.sol"},"here"),"."),(0,o.kt)("h2",{id:"iwhitelistmanager"},"IWhiteListManager"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"interface IWhiteListManager {\n    function whitelistedAccounts(address operator, address account) external returns (bool);\n}\n")),(0,o.kt)("p",null,"Trident franchised pool whitelist manager interface; source code can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sushiswap/trident/blob/master/contracts/interfaces/IWhiteListManager.sol"},"here"),"."))}f.isMDXComponent=!0}}]);